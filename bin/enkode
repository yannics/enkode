#!/bin/bash
######################################################
# enkode - version 5.0.2 alpha
# author: Yann Ics (by.cmsc@gmail.com)
# requires: Praat, SBCL, zip, bc
######################################################
##                                ALL FUNCTIONS NEEDED
##
##
##
# getn allows to write the symbol "=" to a long option
function getn(){
    IN=$1
    arrIN=(${IN//=/ })
    echo ${arrIN[1]}
}

usage(){
   echo "Usage: enkode [OPTION(S)[ value|=value]] sound_file"
}

version(){
    echo "Version 5.0.2 alpha"
}

get_abs_filename() {
  # $1 : relative filename
  echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")"
}

# check if some needed command line are installed
check_if_installed(){
    if which $1 >/dev/null
    then :
    else
	echo "bash: $1: command not found"
	echo "Please install $1 to run this program"
	if [ -z "$2" ]
	then :
	else
	    echo $2
	fi
	if [ -z "$START" ]
	then :
	else
	    rm -rf $workDir/.tmp*
	fi
	exit 1
    fi
}

dirpraat='/Applications/Praat.app/Contents/MacOS/Praat'
if [ ! -e $dirpraat ]
then check_if_installed praat; dirpraat=`readlink -f $(which praat)`;
fi
dirsbcl='/opt/local/bin/sbcl'
if [ ! -e $dirsbcl ]
then dirsbcl='/usr/local/bin/sbcl'
if [ ! -e $dirsbcl ]
then dirsbcl=`pwd`/sbcl
if [ ! -e $dirsbcl ]
then check_if_installed sbcl; dirsbcl=`readlink -f $(which sbcl)`;
fi
fi
fi
check_if_installed bc
check_if_installed zip

######################################################
##                        ALL PARAMETERS AND VARIABLES
##
##
##

if [ $# = 1 ] && [ $1 = -v ]
then version; exit 1;
fi

if [ $# = 1 ] && [ $1 = --version ]
then version; exit 1;
fi

if [ $# = 1 ] && [ $1 = -h ]
then usage; exit 1;
fi

if [ $# = 1 ] && [ $1 = --help ]
then usage; exit 1;
fi

file=$(echo $@ | awk '{ print $NF }')  # name of the sound file (preferred wav or aiff file)
soundpath=$(get_abs_filename "$file")

if [ ! -f $soundpath ]; then usage; exit 1; fi

# ---------------------------------------------
name=`basename "$soundpath" | cut -d. -f1`
hDir=`echo $HOME/Documents`
mkdir -p $hDir/enkode
workDir=`echo $HOME/Documents/enkode`

carg=`echo $0 $@` # for error.log

# ---------------------------------------------
# stdout
out=0

# data file(s)
Fprofile=0
Ftextgrid=0
Fspectrum=0

sbw=5000/116

# Miminal loudness threshold in sone units
minlt=nil

# Maxinal loudness threshold in sone units
maxlt=nil

# Differential loudness threshold in sone units
dlt=nil

# Cut off frequency for low pass filter
fcut=100

# bandwidth frequency for cepstral smoothing
bfcs=500

######################################################
##                                   CHECK ALL OPTIONS
##
##
##
# translate long options to short
for arg
do
    delim=""
    case "$arg" in
	+profile) args="${args}-A ";;
	+textgrid) args="${args}-B ";;
	+spectrum) args="${args}-C ";;
    -spectrum*) a=`getn $arg`;args="${args}-D ${a} ";;
	-textgrid*) a=`getn $arg`;args="${args}-E ${a} ";;

	--loudness-diff-thres*) a=`getn $arg`;args="${args}-a ${a} ";;
	--loudness-min-thres*) a=`getn $arg`;args="${args}-b ${a} ";;
	--loudness-max-thres*) a=`getn $arg`;args="${args}-c ${a} ";;
	--cutoff-frequency*) a=`getn $arg`;args="${args}-d ${a} ";;
	--smooth-frequency*) a=`getn $arg`;args="${args}-e ${a} ";;

	--as-int*) a=`getn $arg`;args="${args}-I ${a} ";;
	--as-tc*) a=`getn $arg`;args="${args}-T ${a} ";;
	--as-gc*) a=`getn $arg`;args="${args}-G ${a} ";;
	--par) args="${args}-p ";;
    # pass through anything else
	*) [[ "${arg:0:1}" == "-" ]] || delim="\""
	args="${args}${delim}${arg}${delim} ";;
    esac
done

# reset the translated args
eval set -- $args
# now we can process with getopt
while getopts "ABCD:E:a:b:c:d:e:I:T:G:p" opt; do
    case $opt in
    A)  Fprofile=1 ;;
	B)  Ftextgrid=1 ;;
	C)  Fspectrum=1 ;;
	D)  sbw=$OPTARG
	    out=4 ;;
	E)  dirtg=$OPTARG
	    Ftextgrid=2 ;;
	a)  dlt=$OPTARG ;;
	b)  minlt=$OPTARG ;;
    c)  maxlt=$OPTARG ;;
	d)  fcut=$OPTARG ;;
	e)  bfcs=$OPTARG ;;
	I)  rec=$OPTARG
	    out=1 ;;
    T)  rec=$OPTARG
        out=2 ;;
	G)  rec=$OPTARG
        out=3 ;;
	p)  Ftextgrid=1
	    Fprofile=1
	    out=5 ;;
	*) echo "Check option(s) and/or argument(s) ..."; exit 1 ;;
    ?) echo "Check option(s) and/or argument(s) ..."; exit 1 ;;
    :) echo "Check option(s) and/or argument(s) ..."; exit 1 ;;
    esac
done

######################################################
##                                       START PROCESS
##
##
##
rm -rf $workDir/.tmp* 2> /dev/null
START=`perl -MTime::HiRes -e 'print Time::HiRes::time(),"\n"'`

NEW=0

if [ -d "$workDir/$name" ]; then
	cd $workDir/$name
    rm -R -- */ 2> /dev/null

  if [ -f $workDir/$name/info ]
	then
	zipname=`grep "START ---" $workDir/$name/info | awk '{print $3}'`
        mkdir $workDir/$name/$zipname; mv $workDir/$name/info $workDir/$name/$zipname/
	elif [ -f $workDir/$name/.info ]
	then
	zipname=`grep "START ---" $workDir/$name/.info | awk '{print $3}'`
	mkdir $workDir/$name/$zipname; rm $workDir/$name/.info
	else
	NEW=1
	fi

  if [ -f $workDir/error.log ]
	then
        mv $workDir/error.log $workDir/$name/$zipname/
	fi
	
	find $workDir/$name -mindepth 1 -maxdepth 1 ! -name '*.zip' -type f -print0 | xargs -0 -I {} mv {} $workDir/$name/$zipname/
else
	mkdir $workDir/$name
	NEW=1
fi

mkdir $workDir/.tmp$START
exec 2> $workDir/.tmp$START/error.log

if [ $NEW = 0 ]; then
    cd $workDir/$name
    zip -q $zipname.zip $zipname/* -x *.* 2> /dev/null
    rm -rf $zipname
fi

# ---------------------------------------------
# script PRAAT
if [ $Ftextgrid != 2 ]
then
echo "form Get loudness profil
	sentence file ...
endform

        Read from file... 'file$'
	current_sound$ = selected$ (\"Sound\")
	     td = Get total duration
             writeFileLine: \"total-duration\", 'td'
	select Sound 'current_sound$'
	do (\"To Cochleagram...\", 0.01, 0.1, 0.03, 0.03)
	do (\"To Matrix\")

ncolumn = do(\"Get number of columns\")

filedelete 'defaultDirectory$'/'current_sound$'.profil
	for a  from 1 to ncolumn
		selectObject: \"Cochleagram 'current_sound$'\"
                To Excitation (slice): a*0.01
                dat = do(\"Get loudness\")
		fileappend 'defaultDirectory$'/profile 'dat' 'newline$'
                selectObject: \"Excitation 'current_sound$'\"
                Remove
	endfor

select all
Remove" > $workDir/.tmp$START/cochlea.praat

$dirpraat --run $workDir/.tmp$START/cochlea.praat $soundpath $seg

# ---------------------------------------------
echo ";; read loudness profile file
 
(defun read-file (file)
  (mapcar #'read-from-string
	  (with-open-file (in-stream file
				     :direction :input
				     :element-type 'character)
	    (loop with length = (file-length in-stream)
	       while (< (file-position in-stream) length)
	       collect (read-line in-stream)))))
 
;; format data to a valid sequence
 
(defun mk-seq (profil &optional (tspa 0.01))
  (let (r) (dotimes (i (length profil) r) (push (* tspa i) r))
       (mapcar #'list (reverse r) profil)))
 
;; get primitive
 
(defun minmax (seq)
  (let ((r (list (cons 0 (car seq)))))
    (loop for i in (cdr seq)
       do
	 (cond ((= (caddar r) (cadr i)) (push (cons 0 i) r))
	       ((< (caddar r) (cadr i)) (push (cons 1 i) r))
	       ((> (caddar r) (cadr i)) (push (cons -1 i) r))))
    r))
 
;; get peaks and valleys
 
(defun stream-minmax (seq)
  (let ((r (list (car seq))))
    (loop for e in (cdr seq)
       do
	 (when (not (or (equalp (car e) (caar r)) (equalp (car e) 0))) (push e r))) (append (last seq) r)))
 
(defun stream-v (seq)
  (mapcar #'cdr (stream-minmax (minmax seq))))
 
(defun peaks (seq)
  (let ((r)
	(m-lst (stream-minmax (minmax seq))))
    (loop for i in m-lst do (when (= 1 (car i)) (push i r)))
    (if (= -1 (caadr m-lst))
	(cons (cdar m-lst) (mapcar #'cdr (reverse r)))
        (mapcar #'cdr (reverse r)))))
 
(defun valleys (seq)
  (let ((r)
	(m-lst (stream-minmax (minmax seq))))
    (loop for i in m-lst do (when (= -1 (car i)) (push i r)))
    (if (= 1 (caadr m-lst))
	(cons (cdar m-lst) (mapcar #'cdr (reverse r)))
        (mapcar #'cdr (reverse r)))))
 
;; filter the streaming sequence according the conditions:
;;   1 - first item and last item have to be a valley [rem-peak]
;;   2 - the absolute value of the difference between two consecutive items has to be superior or equal to the threshold defined by *dlt* (mean-diff by default) [diff-filtering]
;;   3 - each peak has to be superior to the threshold defined by *minlt* [min-filtering]
;;   4 - each valley has to be inferior to the threshold defined by *maxlt* [max-filtering]

(defvar *dlt* nil)
(defvar *minlt* nil)
(defvar *maxlt* nil)
(defvar *mindiff* nil)
(defvar *maxdiff* nil)
(defvar *nextdiff* nil)
(defvar *nextmax* nil)
(defvar *nextmin* nil)
(defvar *prevdiff* nil)

(defun rem-peak (seq-v &optional rev)
  (if rev
      (if (> (cadar seq-v) (cadadr seq-v))
	  (reverse (cdr seq-v))
	  (reverse seq-v))
      (if (> (cadar seq-v) (cadadr seq-v))
	  (rem-peak (reverse (cdr seq-v)) t)
	  (rem-peak (reverse seq-v) t))))

(defun x->dx (lst)
  (mapcar #'(lambda (x) (apply #'- (reverse x))) (butlast (maplist #'(lambda (x) (list (car x) (cadr x))) lst))))

(defun get-next (lst thres)
  (let ((r (reverse (loop for i in (sort (copy-list lst) '>) until (< i thres) collect i))))
    (if (= thres (car r)) (cadr r) (car r))))

(defun opp (n) (* -1 n))

(defun mean-diff (seq-v &optional diff) 
  (let* ((xdy (mapcar #'abs (x->dx (mapcar #'cadr seq-v))))
	 (maxdiff (apply #'max xdy))
	 (dr (if diff diff
               ;; the mean value according to a logarithmic scale is equal to
	       ;; 10^[log(maxval)*meanval/maxval]
	       (expt
		10 
		(*
		 (log maxdiff 10)
		 (/
		  (/ (loop for i in xdy sum i) (length xdy))
		  maxdiff))))))
    (setf *mindiff* (apply #'min xdy))
    (setf *maxdiff* maxdiff)
    (setf *nextdiff* (get-next xdy dr))
    (setf *prevdiff* (opp (get-next (mapcar #'opp xdy) (opp dr))))
    dr))

(defun diff-filtering (seq &optional diff)
  (let ((dlt (mean-diff seq (when diff diff)))
	(r (list (car seq))))
    (setf *dlt* dlt)
    (loop for i in (cdr seq) do (if (null r) (push i r) (if (>= (abs (- (cadr i) (cadar r))) dlt) (push i r) (setf r (cdr r)))))
    (reverse r)))
	 
(defun min-filtering (seq-v &optional min)
  (let ((minlt (if min min (reduce #'min (mapcar #'cadr (loop for i from 1 to (- (length seq-v) 2) by 2 collect (nth i seq-v))))))
	r)
    (setf *minlt* minlt)
    (setf *nextmin* (get-next (mapcar #'cadr (peaks seq-v)) minlt))
    (loop for s in seq-v for i from 0 do (if (oddp i) (when (>= (cadr s) minlt) (push s r)) (push s r)))
    (stream-v (reverse r))))
  
(defun max-filtering (seq-v &optional max)
  (let ((maxlt (if max max (reduce #'max (mapcar #'cadr (loop for i from 0 to (- (length seq-v) 1) by 2 collect (nth i seq-v))))))
	r)
    (setf *maxlt* maxlt)
    (setf *nextmax* (opp (get-next (mapcar #'opp (mapcar #'cadr (valleys seq-v))) (opp maxlt))))
    (loop for s in seq-v for i from 0 do (if (evenp i) (when (<= (cadr s) maxlt) (push s r)) (push s r)))
    (let ((res (rem-peak (stream-v (reverse r)))))
      (if (equalp res seq-v)
	  res
	  (max-filtering res max)))))

;; write TextGrid file
 
(defun subgroup (lst)
  (let (r)
    (loop for i from 0 to (- (length lst) 2)
	 do (push (list (1+ i) (nth i lst) (nth (1+ i) lst)) r))
    (if (zerop (cadar (last r)))
	(reverse r)
	(cons (list nil 0.0 (cadar (last r))) (reverse r)))))

(defun add-end-time (subs td)
  (let ((end (caddar (last subs))))
    (if (= end td) subs
	(reverse (cons (list nil end td) (reverse subs))))))

(defun mk-praat-file-textgrid (sub-lst td str-dir)
  (with-open-file (stream (make-pathname :directory (pathname-directory str-dir)
					 :name (pathname-name str-dir)
					 :type (pathname-type str-dir))
			  :direction :output
			  :if-exists :supersede
			  :if-does-not-exist :create)
    (format stream \"File type = \\\"ooTextFile\\\"~&Objet class = \\\"TextGrid\\\"~2&\")
    (format stream \"~D~&~D~&<exists>~&1~&\\\"IntervalTier\\\"~&\\\"cons\\\"~&~D~&~D~&~D~&\" 0.0 td (cadar sub-lst) (caddar (reverse sub-lst)) (length sub-lst))
    (loop for i in sub-lst
       do
	 (if (eq (car i) nil)
	     (format stream \"~D~&~D~&\\\"\\\"~&\" (cadr i) (caddr i))
	     (format stream \"~D~&~D~&\\\"~D\\\"~&\" (cadr i) (caddr i) (car i))))))
 
;;-------------------" > $workDir/.tmp$START/segmentation.lisp

# add parameters for evaluation
echo "(defparameter *profil* (read-file \"$workDir/.tmp$START/profile\"))" >> $workDir/.tmp$START/segmentation.lisp
echo ";; hack to remove silence at the begining of the sample" >> $workDir/.tmp$START/segmentation.lisp
echo "(let ((nn (loop for i in *profil* until (> i 1.7) count i)))
  (setf *profil* (append (make-list nn :initial-element 100) (nthcdr nn *profil*))))" >> $workDir/.tmp$START/segmentation.lisp

echo "(defparameter *total-duration* (car (read-file \"$workDir/.tmp$START/total-duration\")))" >> $workDir/.tmp$START/segmentation.lisp
echo "(defparameter *seq* (max-filtering (min-filtering (diff-filtering (rem-peak (stream-v (mk-seq *profil*))) $dlt) $minlt) $maxlt))" >> $workDir/.tmp$START/segmentation.lisp
echo "(mk-praat-file-textgrid (add-end-time (subgroup (mapcar #'car (loop for i from 0 to (1- (length *seq*)) by 2 collect (nth i *seq*)))) *total-duration*) *total-duration* \"$workDir/.tmp$START/$name.TextGrid\")" >> $workDir/.tmp$START/segmentation.lisp

echo "(with-open-file (str \"$workDir/.tmp$START/minlt\"
                     :direction :output
                     :if-exists :supersede
                     :if-does-not-exist :create)
    (format str \"~S\" *minlt*))" >> $workDir/.tmp$START/segmentation.lisp
echo "(with-open-file (str \"$workDir/.tmp$START/maxlt\"
                     :direction :output
                     :if-exists :supersede
                     :if-does-not-exist :create)
    (format str \"~S\" *maxlt*))" >> $workDir/.tmp$START/segmentation.lisp
echo "(with-open-file (str \"$workDir/.tmp$START/mindiff\"
                     :direction :output
                     :if-exists :supersede
                     :if-does-not-exist :create)
    (format str \"~S\" *mindiff*))" >> $workDir/.tmp$START/segmentation.lisp
echo "(with-open-file (str \"$workDir/.tmp$START/maxdiff\"
                     :direction :output
                     :if-exists :supersede
                     :if-does-not-exist :create)
    (format str \"~S\" *maxdiff*))" >> $workDir/.tmp$START/segmentation.lisp
echo "(with-open-file (str \"$workDir/.tmp$START/dlt\"
                     :direction :output
                     :if-exists :supersede
                     :if-does-not-exist :create)
    (format str \"~S\" *dlt*))" >> $workDir/.tmp$START/segmentation.lisp
echo "(with-open-file (str \"$workDir/.tmp$START/nextdiff\"
                     :direction :output
                     :if-exists :supersede
                     :if-does-not-exist :create)
    (format str \"~S\" *nextdiff*))" >> $workDir/.tmp$START/segmentation.lisp
echo "(with-open-file (str \"$workDir/.tmp$START/prevdiff\"
                     :direction :output
                     :if-exists :supersede
                     :if-does-not-exist :create)
    (format str \"~S\" *prevdiff*))" >> $workDir/.tmp$START/segmentation.lisp
echo "(with-open-file (str \"$workDir/.tmp$START/nextmin\"
                     :direction :output
                     :if-exists :supersede
                     :if-does-not-exist :create)
    (format str \"~S\" *nextmin*))" >> $workDir/.tmp$START/segmentation.lisp
echo "(with-open-file (str \"$workDir/.tmp$START/nextmax\"
                     :direction :output
                     :if-exists :supersede
                     :if-does-not-exist :create)
    (format str \"~S\" *nextmax*))" >> $workDir/.tmp$START/segmentation.lisp

$dirsbcl --script $workDir/.tmp$START/segmentation.lisp
# ---------------------------------------------
fi

if [ $out != 5 ]
then
# script PRAAT
echo "form Get values
    sentence soundfile ...
    sentence textgrid ...
    positive fcut ...
    positive foss ...
endform

procedure get_first_partial
	i = 1
        up = 0
	f0 = 0
        nbs = Get number of bins
	repeat
		val1 = Get real value in bin: 'i'
		val2 = Get real value in bin: 'i'+1
		i = i + 1
	        if 'val1' - 'val2' > 0 and 'up' = 0
		   up = 0
                else
                   up = 1
                endif
		if  'val1' > 'val2' and 'up' = 1 and 'f0' = 0
		   f0 = Get frequency from bin number: 'i'-1
		endif
	until 'i' = 'nbs'
endproc" > $workDir/.tmp$START/values.praat

# --------------------------------------------
if [ $out == 4 ] || [ $Fspectrum == 1 ]
then
sbin=`echo $sbw | cut -d'/' -f2`
#+++++++++++++++++++++++++++++++++++++++++++++
echo "procedure mk_spectrum
	i = 1
        val=0
	step=1
	div=1
	bw=$sbw
        nbs = Get number of bins
	repeat
		val1 = Get real value in bin: 'i'
		fi = Get frequency from bin number: 'i'
		i = 'i' + 1
                fact='bw' * 'step'

	        if 'fi' > 'fact'
		   
			res=('val1' + 'val')/'div' 
			fileappend 'defaultDirectory$'/spec 'res' 
			val = 'val1'
  			div=1
			step = 'step' + 1
                else
                	val ='val1' + 'val'
			div='div'+1
                endif

	until 'step' = $sbin+1
endproc" >> $workDir/.tmp$START/values.praat
#+++++++++++++++++++++++++++++++++++++++++++++
fi

echo "Read from file... 'soundfile$'
current_sound$ = selected$ (\"Sound\")
Read from file... 'textgrid$'
current_textgrid$ = selected$ (\"TextGrid\")

filedelete 'defaultDirectory$'/res
filedelete 'defaultDirectory$'/fft

select TextGrid 'current_textgrid$'
n = Count intervals where: 1, \"is not equal to\", \"\"
    	for nn from 1 to n

	select Sound 'current_sound$'
	plus TextGrid 'current_textgrid$'
	Extract intervals where: 1, \"no\", \"is equal to\", \"'nn'\"

		duration = Get total duration

        	do (\"To Spectrum...\", \"yes\")
        	centroid = Get centre of gravity... 2
		if (centroid = undefined)
			centroid = 'fcut'/2
		endif

		Cepstral smoothing: 'foss'" >> $workDir/.tmp$START/values.praat

# --------------------------------------------
if [ $out == 4 ] || [ $Fspectrum == 1 ]
then
#+++++++++++++++++++++++++++++++++++++++++++++
echo "call mk_spectrum
fileappend 'defaultDirectory$'/spec 'newline$'" >> $workDir/.tmp$START/values.praat
#+++++++++++++++++++++++++++++++++++++++++++++
fi		

		echo "call get_first_partial
		
		if (f0 = 0)
			f0 = 'fcut'/2
		endif

		select Spectrum 'current_sound$'_'nn'_1
		Remove

      	select Sound 'current_sound$'_'nn'_1

        nocheck To Cochleagram: 0.01, 0.1, 0.03, 0.03
	nocheck To Excitation (slice): 0
	loudness = nocheck Get loudness

        if (loudness = undefined)
                loudness = 1.6
		bass = 1.6
	select Sound 'current_sound$'_'nn'_1
	Remove
        else

	select Cochleagram 'current_sound$'_'nn'_1
	plus Excitation 'current_sound$'_'nn'_1
	Remove
	
	select Sound 'current_sound$'_'nn'_1
      	do (\"Filter (stop Hann band)...\", 'fcut', 0, 50)

      	select Sound 'current_sound$'_'nn'_1_band

	To Cochleagram: 0.01, 0.1, 0.03, 0.03
	To Excitation (slice): 0
	bass = Get loudness

      	appendFileLine(\"res\", 'duration', \" \", 'loudness', \" \", 'centroid', \" \", 'bass', \" \", 'f0')

	select Spectrum 'current_sound$'_'nn'_1
      	plus Sound 'current_sound$'_'nn'_1
      	plus Sound 'current_sound$'_'nn'_1_band
        plus Cochleagram 'current_sound$'_'nn'_1_band
        plus Excitation 'current_sound$'_'nn'_1_band
      	Remove
	endif
	endfor
select all
Remove" >> $workDir/.tmp$START/values.praat

if [ $Ftextgrid == 2 ]
then
$dirpraat --run $workDir/.tmp$START/values.praat $soundpath $dirtg $fcut $bfcs
else
$dirpraat --run $workDir/.tmp$START/values.praat $soundpath $name.TextGrid $fcut $bfcs
fi
fi

# ---------------------------------------------
if [ $out != 0 ] && [ $out != 4 ] && [ $out != 5 ]
then
echo ";; read data file

(defun read-text-lines (file)
  (with-open-file (in-stream file
			     :direction :input
                             :element-type 'character)
    (loop with length = (file-length in-stream)
       while (< (file-position in-stream) length)
       collect (read-line in-stream))))
 
(defun string-to-list (string)
  (let ((the-list nil)
        (end-marker (gensym)))
    (loop (multiple-value-bind (returned-value end-position)
	      (read-from-string string nil end-marker)
            (when (eq returned-value end-marker)
              (return the-list))
            (setq the-list
                  (append the-list (list returned-value)))
            (setq string (subseq string end-position))))))
 
;; convert to thrifty code
 
(defun replace-a (new n lst)
  (mapcar #'(lambda (a) (if (= (setq n (1- n)) -1) new a)) lst))
 
(defun >thrifty-code (a digit)
  (reverse (replace-a 1 (1- a) (make-list digit :initial-element 0))))

;; convert to gray code

(defun 10->n (x n)
  (let (r)
    (if (zerop x) (push 0 r)
        (loop until (= 0 x)
	   do
	     (push (rem x n) r)
	     (setf x (floor x n))))
    r))

(defun fill-lst (lst n)
  (if (<= n (length lst)) lst
    (let ((l lst))
      (loop until (= n (length l))
          do
          (setf l (cons 0 l))) l)))

(defun >gray-code (n digit)
  (fill-lst (10->n (logxor n (ash n -1)) 2) digit))

;; a recursive discrimination
 
(defun nearest (a alst)
  (let ((al (sort (copy-tree alst) #'>)))
    (cadar (sort (loop for i in al collect (list (abs (- i a)) i)) #'< :key #'car))))

(defvar *alist* nil)

(defun asinteger (lst)
  (let* ((al (sort (copy-tree (remove-duplicates lst)) #'<))
	 (alst (loop for n in al for pos from 1 collect (list n pos))))
    (push al *alist*)
    (mapcar #'cadr (loop for i in lst collect (assoc i alst)))))

(defun flat-once (lst)
  (let (r) (loop for i in lst do
		(if (listp i) (dolist (e i r) (push e r)) (push nil r)))
       (reverse r)))
 
(defun mean (lst)
  (if (listp (car lst))
      (list (mean (mapcar #'car lst)) (mean (mapcar #'cadr lst)))
      (/ (reduce #'+ lst) (length lst))))
 
(defun split-mean-lst (lst)
  (if (= 1 (length (remove-duplicates lst)))
      (list lst (list lst))
      (let* ((m (mean lst))
	     (subsup (loop for i in lst when (> i m) collect i))
	     (subinf (loop for i in lst when (<= i m) collect i))
	     (msup (when subsup (mean subsup)))
	     (minf (when subinf (mean subinf))))
	(if (or (null msup) (null minf))
	    (list lst (list lst))
	    (list (list minf m msup) (list subinf subsup))))))
  
(defun mk-attract (lst n &optional r)
  (if (< (length (remove-duplicates lst)) (1- (expt 2 n))) (mk-attract lst (1- n))
      (if (>= (length (car r)) (1- (expt 2 n))) (sort (car r) #'>)
	  (let ((ll (loop for i in (if (null r) (list lst) (cadr r)) collect (split-mean-lst i))))
	    (mk-attract lst n (list (remove-duplicates (union (flat-once (mapcar #'car ll)) (car r))) (flat-once (mapcar #'cadr ll))))))))

(defun mk-attract-class (data coef &optional out)
  (let* ((ma1 (mk-attract data (if (floatp coef) (ceiling coef) coef)))
	 (ma2 (if (floatp coef) (loop for pos from 0 to (1- (length ma1)) when (evenp pos) collect (nth pos ma1)) ma1))
	 (tmp (asinteger (loop for i in data collect (nearest i ma2)))))
    (cond
      ((or (= 1 out) (= 4 out)) tmp)
      ((= 2 out) (loop for i in tmp collect (>thrifty-code i (apply #'max tmp))))
      ((= 3 out) (loop for i in tmp collect (>gray-code i (length (>gray-code (apply #'max tmp) 1)))))
      (t data))))
    
;;-------------------
(defun flatten (lst)
  (if (endp lst)
      lst
      (if (atom (car lst))
	  (append (list (car lst)) (flatten (cdr lst)))
	  (append (flatten (car lst)) (flatten (cdr lst))))))

(defun mat-trans (lst)
  (apply #'mapcar #'list lst))

(defun mk-file (str-dir dat)
  (with-open-file (stream (make-pathname :directory (pathname-directory str-dir)
					 :name (pathname-name str-dir))
			  :direction :output
			  :if-exists :supersede
			  :if-does-not-exist :create)
    (loop for i in dat
       do
	 (format stream \"~{~D ~} ~&\" i))))
;;-------------------" > $workDir/.tmp$START/encode.lisp

# add parameters for evaluation
echo "(defparameter *data* (mapcar #'string-to-list (read-text-lines \"$workDir/.tmp$START/res\")))
(defparameter *coef* (if (listp '$rec)
			 (if (and (= 5 (length '$rec)) (loop for i in '$rec always (numberp i)))
			     '$rec
			     (error \"The argument has to be a list of 5 positive numbers or a positive number.\"))
			 (if (numberp '$rec)
			     (make-list 5 :initial-element '$rec)
			     (error \"The argument has to be a list of 5 positive numbers or a positive number.\"))))
(mk-file \"$workDir/.tmp$START/code\" (mapcar #'flatten (mat-trans (loop for data in (mat-trans *data*) for coef in *coef* collect (mk-attract-class data coef $out)))))
(mk-file \"$workDir/.tmp$START/alist\" (reverse *alist*))" >> $workDir/.tmp$START/encode.lisp

$dirsbcl --script $workDir/.tmp$START/encode.lisp
fi

######################################################
##                                  MANAGE OUT FILE(S)
##
##
##
NOW=$(date +"[%T] [%D]")

if [ $Ftextgrid == 2 ]
then
tmptg=$dirtg
else
tmptg=$workDir/.tmp$START/$name.TextGrid 
fi
noe=`tail -1 $tmptg`
if [ $noe == "\"\"" ]
then noe=`tail -4 $tmptg | head -1`
fi
noe=`echo $noe | tr -d '"'`
if [ $Ftextgrid != 2 ]
then
minltt=`cat $workDir/.tmp$START/minlt`
maxltt=`cat $workDir/.tmp$START/maxlt`
dltt=`cat $workDir/.tmp$START/dlt`
mindiff=`cat $workDir/.tmp$START/mindiff`
maxdiff=`cat $workDir/.tmp$START/maxdiff`
nextdiff=`cat $workDir/.tmp$START/nextdiff`
prevdiff=`cat $workDir/.tmp$START/prevdiff`
nextmin=`cat $workDir/.tmp$START/nextmin`
nextmax=`cat $workDir/.tmp$START/nextmax`
totalduration=`cat $workDir/.tmp$START/total-duration`
fi
version > $workDir/$name/.info
echo "$carg
----------------------------------------------------------
fcut = $fcut Hz
fsmooth = $bfcs Hz
Number of events = $noe" >> $workDir/$name/.info
if [ $Ftextgrid != 2 ]
then
echo "LoudnessMinThres:$minltt [ < $nextmin ]
LoudnessMaxThres:$maxltt [ > $nextmax ]
[ min:$mindiff | $prevdiff < ] LoudnessDiffThres:$dltt [ < $nextdiff | max:$maxdiff ] 
----------------------------------------------------------
Total duration = $totalduration seconds" >> $workDir/$name/.info
else
echo "----------------------------------------------------------" >> $workDir/$name/.info
fi
echo "$NOW" >> $workDir/$name/.info
echo "START --- $START" >> $workDir/$name/.info

if [ $Fprofile == 1 ]
then mv $workDir/.tmp$START/profile $workDir/$name
fi

if [ $Fspectrum == 1 ] && [ $out != 4 ]
then mv $workDir/.tmp$START/spec $workDir/$name/spectrum
fi

if [ $Ftextgrid == 1 ]
then mv $workDir/.tmp$START/$name.TextGrid $workDir/$name
fi

######################################################
##                                    MANAGE ERROR.LOG
##
##
##
# enkode has failed. More information about this failure is listed in error.log file.
if [[ -s $workDir/.tmp$START/error.log ]]
then
	echo "... error during process, check error.log ..." >> $workDir/$name/.info
    cat $workDir/$name/.info > $workDir/error.log
echo "----------------------------------------------------------" >> $workDir/error.log
    #*****************************
    stoptime=`perl -MTime::HiRes -e 'print Time::HiRes::time(),"\n"'`
    echo "stoptime --- $stoptime" >> $workDir/error.log
    #*****************************
echo "----------------------------------------------------------" >> $workDir/error.log
cat $workDir/.tmp$START/error.log >> $workDir/error.log
echo "----------------------------------------------------------
ls -laR $workDir/*" >> $workDir/error.log
ls -laR $workDir/* >> $workDir/error.log
rm -rf $workDir/.tmp*
echo "... error during process, check in ~/Documents/enkode/error.log ..."
exit 1
else
END=`perl -MTime::HiRes -e 'print Time::HiRes::time(),"\n"'`
DIFF=`echo $END - $START | bc`
echo "... done in ${DIFF} seconds." >> $workDir/$name/.info
if [ $out == 0 ]
then printf "%-20s %-20s %-20s %-20s %-20s\n" `cat $workDir/.tmp$START/res`
mv $workDir/$name/.info $workDir/$name/info
rm -rf $workDir/.tmp*
elif [ $out == 4 ]
then cat $workDir/.tmp$START/spec
echo `awk '{print $1}' $workDir/.tmp$START/res` > $workDir/.tmp$START/alist
echo "----------------------------------------------------------" >> $workDir/.tmp$START/alist
cat $workDir/$name/.info >> $workDir/.tmp$START/alist
mv $workDir/.tmp$START/alist $workDir/$name/.info
mv $workDir/$name/.info $workDir/$name/info
mv $workDir/.tmp$START/res $workDir/$name/raw
rm -rf $workDir/.tmp*
elif [ $out == 5 ]
then 
printf "%-25s %s\n" NumberOfEvents $noe
printf "%-25s %-15s < %s\n" --loudness-min-thres $minltt $nextmin
printf "%-25s %-15s > %s\n" --loudness-max-thres $maxltt $nextmax
printf "%-25s %-15s < %s > %s\n" --loudness-diff-thres $dltt $nextdiff $prevdiff
printf "%-25s %s\n" MinDiffLoudness $mindiff
printf "%-25s %s\n" MaxDiffLoudness $maxdiff
mv $workDir/$name/.info $workDir/$name/info
rm -rf $workDir/.tmp*
else
cat $workDir/.tmp$START/code
mv $workDir/.tmp$START/res $workDir/$name/raw
echo "----------------------------------------------------------" >> $workDir/.tmp$START/alist
cat $workDir/$name/.info >> $workDir/.tmp$START/alist
mv $workDir/.tmp$START/alist $workDir/$name/.info
mv $workDir/$name/.info $workDir/$name/info
rm -rf $workDir/.tmp*
fi
fi
